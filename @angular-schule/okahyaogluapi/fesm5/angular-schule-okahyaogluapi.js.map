{"version":3,"file":"angular-schule-okahyaogluapi.js","sources":["ng://@angular-schule/okahyaogluapi/encoder.ts","ng://@angular-schule/okahyaogluapi/variables.ts","ng://@angular-schule/okahyaogluapi/configuration.ts","ng://@angular-schule/okahyaogluapi/api/project.service.ts","ng://@angular-schule/okahyaogluapi/api/workexperience.service.ts","ng://@angular-schule/okahyaogluapi/api/api.ts","ng://@angular-schule/okahyaogluapi/api.module.ts"],"sourcesContent":["    import { HttpUrlEncodingCodec } from '@angular/common/http';\r\n\r\n/**\r\n* CustomHttpUrlEncodingCodec\r\n* Fix plus sign (+) not encoding, so sent as blank space\r\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\r\n*/\r\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\r\n    encodeKey(k: string): string {\r\n        k = super.encodeKey(k);\r\n        return k.replace(/\\+/gi, '%2B');\r\n    }\r\n    encodeValue(v: string): string {\r\n        v = super.encodeValue(v);\r\n        return v.replace(/\\+/gi, '%2B');\r\n    }\r\n}\r\n\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const BASE_PATH = new InjectionToken<string>('basePath');\r\nexport const COLLECTION_FORMATS = {\r\n    'csv': ',',\r\n    'tsv': '   ',\r\n    'ssv': ' ',\r\n    'pipes': '|'\r\n}\r\n","export interface ConfigurationParameters {\r\n    apiKeys?: {[ key: string ]: string};\r\n    username?: string;\r\n    password?: string;\r\n    accessToken?: string | (() => string);\r\n    basePath?: string;\r\n    withCredentials?: boolean;\r\n}\r\n\r\nexport class Configuration {\r\n    apiKeys?: {[ key: string ]: string};\r\n    username?: string;\r\n    password?: string;\r\n    accessToken?: string | (() => string);\r\n    basePath?: string;\r\n    withCredentials?: boolean;\r\n\r\n    constructor(configurationParameters: ConfigurationParameters = {}) {\r\n        this.apiKeys = configurationParameters.apiKeys;\r\n        this.username = configurationParameters.username;\r\n        this.password = configurationParameters.password;\r\n        this.accessToken = configurationParameters.accessToken;\r\n        this.basePath = configurationParameters.basePath;\r\n        this.withCredentials = configurationParameters.withCredentials;\r\n    }\r\n\r\n    /**\r\n     * Select the correct content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param contentTypes - the array of content types that are available for selection\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\r\n        if (contentTypes.length == 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let type = contentTypes.find(x => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return contentTypes[0];\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Select the correct accept content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param accepts - the array of content types that are available for selection.\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    public selectHeaderAccept(accepts: string[]): string | undefined {\r\n        if (accepts.length == 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let type = accepts.find(x => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return accepts[0];\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Check if the given MIME is a JSON MIME.\r\n     * JSON MIME examples:\r\n     *   application/json\r\n     *   application/json; charset=UTF8\r\n     *   APPLICATION/JSON\r\n     *   application/vnd.company+json\r\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\r\n     * @return True if the given MIME is JSON, false otherwise.\r\n     */\r\n    public isJsonMime(mime: string): boolean {\r\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\r\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\r\n    }\r\n}\r\n","/**\r\n * Squidex API for okahyaoglunet App\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 1.0.0\r\n * \r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { ErrorDto } from '../model/errorDto';\r\nimport { InlineResponse200 } from '../model/inlineResponse200';\r\nimport { ProjectContentDto } from '../model/projectContentDto';\r\nimport { ProjectDto } from '../model/projectDto';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class ProjectService {\r\n\r\n    protected basePath = 'http://cms.okahyaoglu.net/api';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * Archive a Project content.\r\n     * \r\n     * @param id The id of the Project content (GUID).\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public archiveProjectContent(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public archiveProjectContent(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public archiveProjectContent(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public archiveProjectContent(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling archiveProjectContent.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.put<any>(`${this.basePath}/content/okahyaoglunet/project/${encodeURIComponent(String(id))}/archive`,\r\n            null,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create a Project content.\r\n     * \r\n     * @param data The data of the content to be created or updated.                Please note that each field is an object with one entry per language.   If the field is not localizable you must use iv (Invariant Language) as a key.  When you change the field to be localizable the value will become the value for the master language, depending what the master language is at this point of time.    Read more about it at: https://docs.squidex.io/04-guides/02-api.html\r\n     * @param publish Set to true to autopublish content.\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public createProjectContent(data: ProjectDto, publish?: boolean, observe?: 'body', reportProgress?: boolean): Observable<ProjectContentDto>;\r\n    public createProjectContent(data: ProjectDto, publish?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProjectContentDto>>;\r\n    public createProjectContent(data: ProjectDto, publish?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProjectContentDto>>;\r\n    public createProjectContent(data: ProjectDto, publish?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (data === null || data === undefined) {\r\n            throw new Error('Required parameter data was null or undefined when calling createProjectContent.');\r\n        }\r\n\r\n\r\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\r\n        if (publish !== undefined && publish !== null) {\r\n            queryParameters = queryParameters.set('publish', <any>publish);\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<ProjectContentDto>(`${this.basePath}/content/okahyaoglunet/project`,\r\n            data,\r\n            {\r\n                params: queryParameters,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Delete a Project content.\r\n     * \r\n     * @param id The id of the Project content (GUID).\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public deleteProjectContent(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public deleteProjectContent(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public deleteProjectContent(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public deleteProjectContent(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling deleteProjectContent.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.delete<any>(`${this.basePath}/content/okahyaoglunet/project/${encodeURIComponent(String(id))}/`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get a Project content.\r\n     * \r\n     * @param id The id of the Project content (GUID).\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public getProjectContent(id: string, observe?: 'body', reportProgress?: boolean): Observable<ProjectContentDto>;\r\n    public getProjectContent(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProjectContentDto>>;\r\n    public getProjectContent(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProjectContentDto>>;\r\n    public getProjectContent(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling getProjectContent.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.get<ProjectContentDto>(`${this.basePath}/content/okahyaoglunet/project/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Patch a Project content.\r\n     * \r\n     * @param data The data of the content to be created or updated.                Please note that each field is an object with one entry per language.   If the field is not localizable you must use iv (Invariant Language) as a key.  When you change the field to be localizable the value will become the value for the master language, depending what the master language is at this point of time.    Read more about it at: https://docs.squidex.io/04-guides/02-api.html\r\n     * @param id The id of the Project content (GUID).\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public pathProjectContent(data: ProjectDto, id: string, observe?: 'body', reportProgress?: boolean): Observable<ProjectDto>;\r\n    public pathProjectContent(data: ProjectDto, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProjectDto>>;\r\n    public pathProjectContent(data: ProjectDto, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProjectDto>>;\r\n    public pathProjectContent(data: ProjectDto, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (data === null || data === undefined) {\r\n            throw new Error('Required parameter data was null or undefined when calling pathProjectContent.');\r\n        }\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling pathProjectContent.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.patch<ProjectDto>(`${this.basePath}/content/okahyaoglunet/project/${encodeURIComponent(String(id))}`,\r\n            data,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Publish a Project content.\r\n     * \r\n     * @param id The id of the Project content (GUID).\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public publishProjectContent(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public publishProjectContent(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public publishProjectContent(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public publishProjectContent(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling publishProjectContent.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.put<any>(`${this.basePath}/content/okahyaoglunet/project/${encodeURIComponent(String(id))}/publish`,\r\n            null,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Queries Project contents.\r\n     * The squidex API the OData url convention to query data.     We support the following query options.    * **$top**: The $top query option requests the number of items in the queried collection to be included in the result. The default value is 20 and the maximum allowed value is 200.  * **$skip**: The $skip query option requests the number of items in the queried collection that are to be skipped and not included in the result. Use it together with $top to read the all your data page by page.   * **$search**: The $search query option allows clients to request entities matching a free-text search expression. We add the data of all fields for all languages to a single field in the database and use this combined field to implement the full text search.  * **$filter**: The $filter query option allows clients to filter a collection of resources that are addressed by a request URL.  * **$orderby**: The $orderby query option allows clients to request resources in a particular order.    Read more about it at: https://docs.squidex.io/04-guides/02-api.html  \r\n     * @param top Optional number of contents to take (Default: 20).\r\n     * @param skip Optional number of contents to skip.\r\n     * @param filter Optional OData filter.\r\n     * @param search Optional OData full text search.\r\n     * @param orderby Optional OData order definition.\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public queryProjectContents(top?: number, skip?: number, filter?: string, search?: string, orderby?: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;\r\n    public queryProjectContents(top?: number, skip?: number, filter?: string, search?: string, orderby?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;\r\n    public queryProjectContents(top?: number, skip?: number, filter?: string, search?: string, orderby?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;\r\n    public queryProjectContents(top?: number, skip?: number, filter?: string, search?: string, orderby?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n\r\n\r\n\r\n\r\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\r\n        if (top !== undefined && top !== null) {\r\n            queryParameters = queryParameters.set('$top', <any>top);\r\n        }\r\n        if (skip !== undefined && skip !== null) {\r\n            queryParameters = queryParameters.set('$skip', <any>skip);\r\n        }\r\n        if (filter !== undefined && filter !== null) {\r\n            queryParameters = queryParameters.set('$filter', <any>filter);\r\n        }\r\n        if (search !== undefined && search !== null) {\r\n            queryParameters = queryParameters.set('$search', <any>search);\r\n        }\r\n        if (orderby !== undefined && orderby !== null) {\r\n            queryParameters = queryParameters.set('orderby', <any>orderby);\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.get<InlineResponse200>(`${this.basePath}/content/okahyaoglunet/project`,\r\n            {\r\n                params: queryParameters,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Restore a Project content.\r\n     * \r\n     * @param id The id of the Project content (GUID).\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public restoreProjectContent(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public restoreProjectContent(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public restoreProjectContent(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public restoreProjectContent(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling restoreProjectContent.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.put<any>(`${this.basePath}/content/okahyaoglunet/project/${encodeURIComponent(String(id))}/restore`,\r\n            null,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Unpublish a Project content.\r\n     * \r\n     * @param id The id of the Project content (GUID).\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public unpublishProjectContent(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public unpublishProjectContent(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public unpublishProjectContent(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public unpublishProjectContent(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling unpublishProjectContent.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.put<any>(`${this.basePath}/content/okahyaoglunet/project/${encodeURIComponent(String(id))}/unpublish`,\r\n            null,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Update a Project content.\r\n     * \r\n     * @param data The data of the content to be created or updated.                Please note that each field is an object with one entry per language.   If the field is not localizable you must use iv (Invariant Language) as a key.  When you change the field to be localizable the value will become the value for the master language, depending what the master language is at this point of time.    Read more about it at: https://docs.squidex.io/04-guides/02-api.html\r\n     * @param id The id of the Project content (GUID).\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public updateProjectContent(data: ProjectDto, id: string, observe?: 'body', reportProgress?: boolean): Observable<ProjectDto>;\r\n    public updateProjectContent(data: ProjectDto, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProjectDto>>;\r\n    public updateProjectContent(data: ProjectDto, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProjectDto>>;\r\n    public updateProjectContent(data: ProjectDto, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (data === null || data === undefined) {\r\n            throw new Error('Required parameter data was null or undefined when calling updateProjectContent.');\r\n        }\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling updateProjectContent.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.put<ProjectDto>(`${this.basePath}/content/okahyaoglunet/project/${encodeURIComponent(String(id))}`,\r\n            data,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Squidex API for okahyaoglunet App\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 1.0.0\r\n * \r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { ErrorDto } from '../model/errorDto';\r\nimport { InlineResponse2001 } from '../model/inlineResponse2001';\r\nimport { WorkexperienceContentDto } from '../model/workexperienceContentDto';\r\nimport { WorkexperienceDto } from '../model/workexperienceDto';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class WorkexperienceService {\r\n\r\n    protected basePath = 'http://cms.okahyaoglu.net/api';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * Archive a Workexperience content.\r\n     * \r\n     * @param id The id of the Workexperience content (GUID).\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public archiveWorkexperienceContent(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public archiveWorkexperienceContent(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public archiveWorkexperienceContent(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public archiveWorkexperienceContent(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling archiveWorkexperienceContent.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.put<any>(`${this.basePath}/content/okahyaoglunet/workexperience/${encodeURIComponent(String(id))}/archive`,\r\n            null,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create a Workexperience content.\r\n     * \r\n     * @param data The data of the content to be created or updated.                Please note that each field is an object with one entry per language.   If the field is not localizable you must use iv (Invariant Language) as a key.  When you change the field to be localizable the value will become the value for the master language, depending what the master language is at this point of time.    Read more about it at: https://docs.squidex.io/04-guides/02-api.html\r\n     * @param publish Set to true to autopublish content.\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public createWorkexperienceContent(data: WorkexperienceDto, publish?: boolean, observe?: 'body', reportProgress?: boolean): Observable<WorkexperienceContentDto>;\r\n    public createWorkexperienceContent(data: WorkexperienceDto, publish?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkexperienceContentDto>>;\r\n    public createWorkexperienceContent(data: WorkexperienceDto, publish?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkexperienceContentDto>>;\r\n    public createWorkexperienceContent(data: WorkexperienceDto, publish?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (data === null || data === undefined) {\r\n            throw new Error('Required parameter data was null or undefined when calling createWorkexperienceContent.');\r\n        }\r\n\r\n\r\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\r\n        if (publish !== undefined && publish !== null) {\r\n            queryParameters = queryParameters.set('publish', <any>publish);\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<WorkexperienceContentDto>(`${this.basePath}/content/okahyaoglunet/workexperience`,\r\n            data,\r\n            {\r\n                params: queryParameters,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Delete a Workexperience content.\r\n     * \r\n     * @param id The id of the Workexperience content (GUID).\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public deleteWorkexperienceContent(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public deleteWorkexperienceContent(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public deleteWorkexperienceContent(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public deleteWorkexperienceContent(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling deleteWorkexperienceContent.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.delete<any>(`${this.basePath}/content/okahyaoglunet/workexperience/${encodeURIComponent(String(id))}/`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get a Workexperience content.\r\n     * \r\n     * @param id The id of the Workexperience content (GUID).\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public getWorkexperienceContent(id: string, observe?: 'body', reportProgress?: boolean): Observable<WorkexperienceContentDto>;\r\n    public getWorkexperienceContent(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkexperienceContentDto>>;\r\n    public getWorkexperienceContent(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkexperienceContentDto>>;\r\n    public getWorkexperienceContent(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling getWorkexperienceContent.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.get<WorkexperienceContentDto>(`${this.basePath}/content/okahyaoglunet/workexperience/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Patch a Workexperience content.\r\n     * \r\n     * @param data The data of the content to be created or updated.                Please note that each field is an object with one entry per language.   If the field is not localizable you must use iv (Invariant Language) as a key.  When you change the field to be localizable the value will become the value for the master language, depending what the master language is at this point of time.    Read more about it at: https://docs.squidex.io/04-guides/02-api.html\r\n     * @param id The id of the Workexperience content (GUID).\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public pathWorkexperienceContent(data: WorkexperienceDto, id: string, observe?: 'body', reportProgress?: boolean): Observable<WorkexperienceDto>;\r\n    public pathWorkexperienceContent(data: WorkexperienceDto, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkexperienceDto>>;\r\n    public pathWorkexperienceContent(data: WorkexperienceDto, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkexperienceDto>>;\r\n    public pathWorkexperienceContent(data: WorkexperienceDto, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (data === null || data === undefined) {\r\n            throw new Error('Required parameter data was null or undefined when calling pathWorkexperienceContent.');\r\n        }\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling pathWorkexperienceContent.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.patch<WorkexperienceDto>(`${this.basePath}/content/okahyaoglunet/workexperience/${encodeURIComponent(String(id))}`,\r\n            data,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Publish a Workexperience content.\r\n     * \r\n     * @param id The id of the Workexperience content (GUID).\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public publishWorkexperienceContent(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public publishWorkexperienceContent(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public publishWorkexperienceContent(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public publishWorkexperienceContent(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling publishWorkexperienceContent.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.put<any>(`${this.basePath}/content/okahyaoglunet/workexperience/${encodeURIComponent(String(id))}/publish`,\r\n            null,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Queries Workexperience contents.\r\n     * The squidex API the OData url convention to query data.     We support the following query options.    * **$top**: The $top query option requests the number of items in the queried collection to be included in the result. The default value is 20 and the maximum allowed value is 200.  * **$skip**: The $skip query option requests the number of items in the queried collection that are to be skipped and not included in the result. Use it together with $top to read the all your data page by page.   * **$search**: The $search query option allows clients to request entities matching a free-text search expression. We add the data of all fields for all languages to a single field in the database and use this combined field to implement the full text search.  * **$filter**: The $filter query option allows clients to filter a collection of resources that are addressed by a request URL.  * **$orderby**: The $orderby query option allows clients to request resources in a particular order.    Read more about it at: https://docs.squidex.io/04-guides/02-api.html  \r\n     * @param top Optional number of contents to take (Default: 20).\r\n     * @param skip Optional number of contents to skip.\r\n     * @param filter Optional OData filter.\r\n     * @param search Optional OData full text search.\r\n     * @param orderby Optional OData order definition.\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public queryWorkexperienceContents(top?: number, skip?: number, filter?: string, search?: string, orderby?: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2001>;\r\n    public queryWorkexperienceContents(top?: number, skip?: number, filter?: string, search?: string, orderby?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2001>>;\r\n    public queryWorkexperienceContents(top?: number, skip?: number, filter?: string, search?: string, orderby?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2001>>;\r\n    public queryWorkexperienceContents(top?: number, skip?: number, filter?: string, search?: string, orderby?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n\r\n\r\n\r\n\r\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\r\n        if (top !== undefined && top !== null) {\r\n            queryParameters = queryParameters.set('$top', <any>top);\r\n        }\r\n        if (skip !== undefined && skip !== null) {\r\n            queryParameters = queryParameters.set('$skip', <any>skip);\r\n        }\r\n        if (filter !== undefined && filter !== null) {\r\n            queryParameters = queryParameters.set('$filter', <any>filter);\r\n        }\r\n        if (search !== undefined && search !== null) {\r\n            queryParameters = queryParameters.set('$search', <any>search);\r\n        }\r\n        if (orderby !== undefined && orderby !== null) {\r\n            queryParameters = queryParameters.set('orderby', <any>orderby);\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.get<InlineResponse2001>(`${this.basePath}/content/okahyaoglunet/workexperience`,\r\n            {\r\n                params: queryParameters,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Restore a Workexperience content.\r\n     * \r\n     * @param id The id of the Workexperience content (GUID).\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public restoreWorkexperienceContent(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public restoreWorkexperienceContent(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public restoreWorkexperienceContent(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public restoreWorkexperienceContent(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling restoreWorkexperienceContent.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.put<any>(`${this.basePath}/content/okahyaoglunet/workexperience/${encodeURIComponent(String(id))}/restore`,\r\n            null,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Unpublish a Workexperience content.\r\n     * \r\n     * @param id The id of the Workexperience content (GUID).\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public unpublishWorkexperienceContent(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public unpublishWorkexperienceContent(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public unpublishWorkexperienceContent(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public unpublishWorkexperienceContent(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling unpublishWorkexperienceContent.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.put<any>(`${this.basePath}/content/okahyaoglunet/workexperience/${encodeURIComponent(String(id))}/unpublish`,\r\n            null,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Update a Workexperience content.\r\n     * \r\n     * @param data The data of the content to be created or updated.                Please note that each field is an object with one entry per language.   If the field is not localizable you must use iv (Invariant Language) as a key.  When you change the field to be localizable the value will become the value for the master language, depending what the master language is at this point of time.    Read more about it at: https://docs.squidex.io/04-guides/02-api.html\r\n     * @param id The id of the Workexperience content (GUID).\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public updateWorkexperienceContent(data: WorkexperienceDto, id: string, observe?: 'body', reportProgress?: boolean): Observable<WorkexperienceDto>;\r\n    public updateWorkexperienceContent(data: WorkexperienceDto, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkexperienceDto>>;\r\n    public updateWorkexperienceContent(data: WorkexperienceDto, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkexperienceDto>>;\r\n    public updateWorkexperienceContent(data: WorkexperienceDto, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (data === null || data === undefined) {\r\n            throw new Error('Required parameter data was null or undefined when calling updateWorkexperienceContent.');\r\n        }\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling updateWorkexperienceContent.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (squidex-oauth-auth) required\r\n        if (this.configuration.accessToken) {\r\n            const accessToken = typeof this.configuration.accessToken === 'function'\r\n                ? this.configuration.accessToken()\r\n                : this.configuration.accessToken;\r\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.put<WorkexperienceDto>(`${this.basePath}/content/okahyaoglunet/workexperience/${encodeURIComponent(String(id))}`,\r\n            data,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","export * from './project.service';\r\nimport { ProjectService } from './project.service';\r\nexport * from './workexperience.service';\r\nimport { WorkexperienceService } from './workexperience.service';\r\nexport const APIS = [ProjectService, WorkexperienceService];\r\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\r\nimport { Configuration } from './configuration';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n\r\nimport { ProjectService } from './api/project.service';\r\nimport { WorkexperienceService } from './api/workexperience.service';\r\n\r\n@NgModule({\r\n  imports:      [],\r\n  declarations: [],\r\n  exports:      [],\r\n  providers: [\r\n    ProjectService,\r\n    WorkexperienceService ]\r\n})\r\nexport class ApiModule {\r\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\r\n        return {\r\n            ngModule: ApiModule,\r\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\r\n        };\r\n    }\r\n\r\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\r\n                 @Optional() http: HttpClient) {\r\n        if (parentModule) {\r\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\r\n        }\r\n        if (!http) {\r\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n            'See also https://github.com/angular/angular/issues/20575');\r\n        }\r\n    }\r\n}\r\n"],"names":["tslib_1.__extends","tslib_1.__values","tslib_1.__param"],"mappings":"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"}